
@model eBookStore.Models.ViewModels.LandingPageViewModel
@{
    ViewData["Title"] = "Home";
    Console.WriteLine(Model.SpecialSales[0].coverModel.imgName);
}

<div class="home-container">
    
    <div class="home-card h-100">
        

        <div class="Header-SearchBar row ms-1">
            
            <div class="home-header col-7 mt-4">
                <h2 class="header-one">Welcome to eBookStore</h2>
                <p class="sub-header ms-2">Your one-stop shop for the best eBooks!</p>
            </div>

            <div class="SearchBar col-4 mt-4">
                <form class="d-flex" role="search">
                    <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                    <button class="search-btn btn-outline-primary" type="submit">Search</button>
                </form>

            </div>

        </div>



        <div class="home-content ">

            <div class="WelcomeImg container">
                <img class="img-fluid w-100" src="\images\homePage-pic2.jpg" alt="WelcomeImg">
            </div>

            
            

            <div class="specialSales row d-flex ms-3" style="padding-top: 10%;">
                <div class="sub-header row ">
                    <h2 class="header-one row">Special Sales:</h4>

                    <p>Explore a wide range of books and manage your library without breaking the bank.</p>
                </div>

                <div class="BooksContainer row">
                    <!-- This contains 2 books on sale  -->
                    <div class="Book-container col" style="justify-items: center;">
                        <div class="card" style="width: 21rem;">
                                <a href="@Url.Action("Index", "Book")/1">
                                    <img src="\images\bookCovers\@Model.SpecialSales[0].coverModel.imgName" class="card-img-top" alt="@Model.SpecialSales[0].coverModel.imgName">
                                </a>

                                <div class="card-body d-grid">
                                    <h5 class="card-title">@Model.SpecialSales[0].book.title</h5>
                                    <p class="card-text">
                                        <a>Author: Need Fix </a><br> 
                                        <a>Published by: @Model.SpecialSales[0].publisherModel.name</a><br>
                                        <a>Genre: @Model.SpecialSales[0].genreModel.name</a><br>
                                        <a>Age limit: @Model.SpecialSales[0].book.ageLimit</a><br>
                                        <a>Publish date: @Model.SpecialSales[0].book.pubDate</a><br>
                                        <a>Rating: @Model.SpecialSales[0].book.starRate</a><br>
                                        <a>Original Price: @Model.SpecialSales[0].book.priceHistory$</a><br>
                                        <a>OnSale: @Model.SpecialSales[0].book.buyingPrice$</a>

                                    </p>
                                    <a href="#" class="buy-buttom text-center";">Buy-Now</a>
                                </div>
                        </div> 

                    </div>

                    <div class="Book-container col" style="justify-items: center;">
                        <div class="card" style="width: 21rem;">
                                <a href="@Url.Action("Index", "Book")/4">
                                    <img src="\images\bookCovers\@Model.SpecialSales[3].coverModel.imgName" class="card-img-top" alt="@Model.SpecialSales[3].coverModel.imgName">
                                </a>

                                <div class="card-body d-grid">
                                    <h5 class="card-title">@Model.SpecialSales[3].book.title</h5>
                                    <p class="card-text">
                                        <a>Author: Need Fix </a><br> 
                                        <a>Published by: @Model.SpecialSales[3].publisherModel.name</a><br>
                                        <a>Genre: @Model.SpecialSales[3].genreModel.name</a><br>
                                        <a>Age limit: @Model.SpecialSales[3].book.ageLimit</a><br>
                                        <a>Publish date: @Model.SpecialSales[3].book.pubDate</a><br>
                                        <a>Rating: @Model.SpecialSales[3].book.starRate</a><br>
                                        <a>Original Price: @Model.SpecialSales[3].book.priceHistory$</a><br>
                                        <a>OnSale: @Model.SpecialSales[3].book.buyingPrice$</a>

                                    </p>
                                    <a href="#" class="buy-buttom text-center";">Buy-Now</a>
                                </div>
                        </div> 

                    </div>


                </div>


                

            </div>


            <div class="Header-one row mt-5 ms-2" style="align-items:flex-end;">

                <h2>Explore Our Gallery:</h2>

            </div>

            <div id="BooksCarousel" class="carousel slide mt-4 position-relative" data-bs-ride="carousel" data-bs-interval="false">
                <div class="carousel-inner">
                    <!-- Dynamic content will be inserted here -->
                </div>
                <!-- Carousel controls -->
                <button class="carousel-control-prev" role="button" data-bs-target="#BooksCarousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>

                <button class="carousel-control-next" role="button" data-bs-target="#BooksCarousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>

            </div>


            <div class="Categorys row ms-1" style="height: 120px;">

                <button class="category-buttom col-1 ">Action</button>
                <button class="category-buttom col-1 ">Drama</button>
                <button class="category-buttom col-1 ">Romance</button>



            </div>


        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Additional interactivity or scripts can be added here
        console.log("Home page loaded.");


        // Array of image URLs (replace with your own or fetch from API)
        const imageUrls = [
            '@Model.allBooks[0].coverModel.imgName',
            '@Model.allBooks[1].coverModel.imgName',
            '@Model.allBooks[2].coverModel.imgName',
            '@Model.allBooks[3].coverModel.imgName',
            '@Model.allBooks[4].coverModel.imgName',
        ];

       

        // Select the roller track container
        const carouselInner = document.querySelector('.carousel-inner');


        // Function to dynamically populate images
       function populateCarousel(images, imagesPerItem = 4) {
            let chunk = []; // Temporary array to hold a chunk of images

            images.forEach((url, index) => {
                // Push the current image URL into the chunk
                chunk.push(url);

                // When the chunk reaches the desired number of images (or it's the last image)
                if (chunk.length === imagesPerItem || index === images.length - 1) {
                    // Create a carousel item
                    const carouselItem = document.createElement('div');
                    carouselItem.className = `carousel-item ${carouselInner.children.length === 0 ? ' active' : ''}`;
                    

                    // Create a container for the row of images
                    const row = document.createElement('div');
                    row.className = 'row';

                    // Add each image in the chunk to the row
                    chunk.forEach((chunkUrl) => {
                        const col = document.createElement('div');
                        col.className = 'col-2'; // Adjust based on how many images per row 
                        col.style = 'padding-inline: 10px;';

                        const img = document.createElement('img');
                        img.src = `\\images\\bookCovers\\${chunkUrl || 'default_book_cover.jpg'}`; // Dynamically set the image URL or fallback
                        img.alt = chunkUrl;
                        img.style = "border-radius: 30px;"
                        img.className = 'img-fluid'; // Ensure responsiveness
                        

                        col.appendChild(img);
                        row.appendChild(col);
                    });

                    // Append the row to the carousel item
                    carouselItem.appendChild(row);

                    // Append the carousel item to the carousel inner container
                    carouselInner.appendChild(carouselItem);

                    // Clear the chunk
                    chunk = [];
                }
            });
        }


        // Populate the carousel dynamically
        populateCarousel(imageUrls,6);


    </script>
}
