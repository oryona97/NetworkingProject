@model IEnumerable<eBookStore.Models.ViewModels.BookViewModel>
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Shopping Cart";
    var currentUser = Context.Session.GetInt32("userId") ?? 0;
}

<style>
    .cart-item {
        transition: all 0.2s ease;
        border-radius: 8px;
        background: #fff;
        padding: 1.5rem;
        margin-bottom: 1rem;
        border: 1px solid #eee;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .cart-item:hover {
        border-color: #dee2e6;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .remove-btn {
        transition: all 0.2s ease;
        border: none;
        background: none;
        color: #dc3545;
        padding: 0.5rem;
    }

    .remove-btn:hover {
        color: #bb2d3b;
        transform: scale(1.05);
    }

    .book-image {
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .summary-card {
        border: 1px solid #eee;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.05);
        position: sticky;
        top: 20px;
    }

    .checkout-btn, .continue-btn {
        transition: all 0.3s ease;
    }

    .checkout-btn:hover {
        transform: translateY(-2px);
    }

    .empty-cart {
        text-align: center;
        padding: 4rem 2rem;
    }

    .purchase-type-switch {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 0.5rem;
        margin-bottom: 1rem;
    }

    .format-select {
        background-color: #f8f9fa;
        border-radius: 6px;
    }

    .price-badge {
        font-size: 1.1rem;
        padding: 0.4rem 0.8rem;
        border-radius: 6px;
        background: #f8f9fa;
    }

    .savings-badge {
        font-size: 0.9rem;
        padding: 0.2rem 0.6rem;
        border-radius: 4px;
        background: #28a745;
        color: white;
        margin-left: 0.5rem;
    }

    .queue-info {
        font-size: 0.9rem;
    }

    .queue-info .alert {
        border-radius: 6px;
        padding: 0.5rem 1rem;
    }

    .badge.bg-warning {
        font-size: 0.75em;
        padding: 0.25em 0.6em;
    }

    .queue-position {
        display: inline-block;
        padding: 0.25em 0.6em;
        font-size: 0.75em;
        border-radius: 0.25rem;
        background-color: #f8f9fa;
        margin-left: 0.5rem;
    }
</style>

<div class="container py-5">
    @if (!Model?.Any() ?? true)
    {
        <div class="empty-cart">
            <i class="bi bi-cart text-muted" style="font-size: 3rem;"></i>
            <h4 class="mt-4 mb-3">Your cart is empty</h4>
            <p class="text-muted">Looking for something to read?</p>
            <a href="@Url.Action("Index", "Gallery")" class="btn btn-primary continue-btn">
                Browse Books
            </a>
        </div>
    }
    else
    {
        <div class="row g-4">
            <!-- Cart Items -->
            <div class="col-lg-8">
                <h4 class="mb-4">Shopping Cart (@Model?.Count() items)</h4>
                @if (Model != null)
                {
                    @foreach (var bookVM in Model)
                    {
                        @if (bookVM?.book != null)
                        {
                            <div class="cart-item" data-book-id="@bookVM.book.id">
                                <div class="row align-items-center">
                                    <div class="col-md-2">
                                        <img src="images/bookCovers/@bookVM.coverModel.imgName" 
                                             class="img-fluid book-image" 
                                             alt="@bookVM.book.title">
                                    </div>
                                    <div class="col-md-7">
                                        <h5 class="mb-1">@bookVM.book.title</h5>
                                        @if (bookVM.authorModel != null)
                                        {
                                            <p class="text-muted mb-2">by @bookVM.authorModel.name</p>
                                        }
                                        
                                        <div class="purchase-type-switch mb-3">
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="radio" 
                                                       name="purchaseType_@bookVM.book.id" 
                                                       id="buy_@bookVM.book.id" 
                                                       value="buy"
                                                       checked
                                                       onchange="updatePurchaseType(@bookVM.book.id)">
                                                <label class="form-check-label" for="buy_@bookVM.book.id">Buy</label>
                                            </div>
                                            @if (bookVM.book.canBorrow)
                                            {
                                                <div class="form-check form-check-inline">
                                                    <input class="form-check-input" type="radio" 
                                                           name="purchaseType_@bookVM.book.id" 
                                                           id="borrow_@bookVM.book.id" 
                                                           value="borrow"
                                                           onchange="updatePurchaseType(@bookVM.book.id)">
                                                    <label class="form-check-label" for="borrow_@bookVM.book.id">
                                                        Borrow (30 days)
                                                    </label>
                                                </div>
                                            }
                                        </div>

                                        <div class="form-group mb-3">
                                            <select class="form-select form-select-sm format-select" 
                                                    style="width: auto;"
                                                    data-book-id="@bookVM.book.id"
                                                    onchange="updateFormat(this, @bookVM.book.id)">
                                                <option value="pdf">PDF</option>
                                                <option value="epub">EPUB</option>
                                                <option value="mobi">MOBI</option>
                                            </select>
                                        </div>

                                        <div class="price-container">
                                            <span class="price-badge text-primary purchase-price">₪@bookVM.book.buyingPrice.ToString("0.00")</span>
                                            <span class="borrow-price" style="display: none;">
                                                <span class="price-badge text-success">₪@(((decimal)bookVM.book.buyingPrice * 0.2M).ToString("0.00"))</span>
                                                <span class="savings-badge">Save 80%</span>
                                            </span>
                                        </div>

                                        <!-- Queue Information -->
                                        <div class="queue-info" id="queue-info-@bookVM.book.id" style="display: none;">
                                            <div class="alert alert-info mt-2 mb-0">
                                                <small>
                                                    <i class="bi bi-info-circle"></i>
                                                    <span id="queue-message-@bookVM.book.id"></span>
                                                </small>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-3 text-end">
                                        <button type="button" 
                                                class="remove-btn" 
                                                data-book-id="@bookVM.book.id" 
                                                onclick="removeFromCart(@bookVM.book.id)">
                                            <i class="bi bi-trash"></i> Remove
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                }
            </div>

            <!-- Order Summary -->
            <div class="col-lg-4">
                <div class="summary-card p-4">
                    <h4 class="mb-4">Order Summary</h4>
                    <div class="d-flex justify-content-between mb-3">
                        <span class="text-muted">Subtotal</span>
                        <span class="h5 mb-0">₪@Model.Where(b => b?.book != null).Sum(b => b.book.buyingPrice).ToString("0.00")</span>
                    </div>
                    <hr class="my-4">
                    <button type="button" id="checkout-button" class="btn btn-primary w-100 mb-3 checkout-btn">
                        <i class="bi bi-lock"></i>Checkout
                    </button>
                    <a href="@Url.Action("landingPage", "Home")" 
                       class="btn btn-outline-secondary w-100 continue-btn">
                        <i class="bi bi-arrow-left"></i> Continue Shopping
                    </a>
                </div>
            </div>
        </div>
    }
</div>

@section scripts {
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        var stripe = Stripe('@Configuration["Stripe:PublicKey"]');
        const selectedFormats = {};
        const purchaseTypes = {};

        const checkQueueStatus = async (bookId) => {
            try {
                const response = await fetch(`/ShoppingCart/GetQueuePosition?bookId=${bookId}`);
                const result = await response.json();

                if (result.success) {
                    const queueInfo = document.getElementById(`queue-info-${bookId}`);
                    const queueMessage = document.getElementById(`queue-message-${bookId}`);

                    queueInfo.style.display = 'block';
                    if (result.position > 0) {
                        queueMessage.textContent = `You are position ${result.position} in the queue. We'll notify you when the book becomes available.`;
                    } else {
                        queueMessage.textContent = `You have been added to the queue. We'll notify you when the book becomes available.`;
                    }
                }
            } catch (error) {
                console.error('Error checking queue status:', error);
            }
        };

        const updateFormat = (selectElement, bookId) => {
            selectedFormats[bookId] = selectElement.value;
            updateCartTotal();
        }

        const updatePurchaseType = async (bookId) => {
            const purchaseType = document.querySelector(`input[name="purchaseType_${bookId}"]:checked`).value;
            purchaseTypes[bookId] = purchaseType;

            const cartItem = document.querySelector(`.cart-item[data-book-id="${bookId}"]`);
            const purchasePrice = cartItem.querySelector('.purchase-price');
            const borrowPrice = cartItem.querySelector('.borrow-price');
            const queueInfo = document.getElementById(`queue-info-${bookId}`);

            if (purchaseType === 'borrow') {
                purchasePrice.style.display = 'none';
                borrowPrice.style.display = 'inline-block';
                await checkQueueStatus(bookId);
            } else {
                purchasePrice.style.display = 'inline-block';
                borrowPrice.style.display = 'none';
                queueInfo.style.display = 'none';
            }

            updateCartTotal();
        };

        const removeFromCart = async (bookId) => {
            if (!confirm('Are you sure you want to remove this item from your cart?')) {
                return;
            }

            try {
                // Remove from queue if in borrow mode
                if (purchaseTypes[bookId] === 'borrow') {
                    await fetch('/ShoppingCart/LeaveQueue', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ bookId: bookId })
                    });
                }

                const response = await fetch('/ShoppingCart/RemoveFromShoppingCart', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        bookId: bookId,
                        isBorrowed: purchaseTypes[bookId] === 'borrow'
                    })
                });

                const result = await response.json();
                if (result.success) {
                    const cartItem = document.querySelector(`.cart-item[data-book-id="${bookId}"]`);
                    cartItem.remove();

                    const remainingItems = document.querySelectorAll('.cart-item').length;
                    updateCartCount(remainingItems);
                    updateCartTotal();

                    if (remainingItems === 0) {
                        window.location.reload();
                    }
                } else {
                    alert(result.message || 'Failed to remove item from cart');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error removing item from cart');
            }
        }

        const updateCartTotal = () => {
            const cartItems = document.querySelectorAll('.cart-item');
            let total = 0;

            cartItems.forEach(item => {
                const bookId = item.dataset.bookId;
                const purchaseType = purchaseTypes[bookId] || 'buy';
                const priceElement = purchaseType === 'borrow' ? 
                    item.querySelector('.borrow-price .price-badge') :
                    item.querySelector('.purchase-price');

                const price = parseFloat(priceElement.textContent.replace('₪', ''));
                total += price;
            });

            const totalElement = document.querySelector('.summary-card .h5');
            if (totalElement) {
                totalElement.textContent = `₪${total.toFixed(2)}`;
            }
        }

        const validateCartForCheckout = async () => {
            const cartItems = Array.from(document.querySelectorAll('.cart-item'));
            let isValid = true;
            let errorMessage = '';

            for (const item of cartItems) {
                const bookId = item.dataset.bookId;
                const purchaseType = purchaseTypes[bookId] || 'buy';

                if (purchaseType === 'borrow') {
                    try {
                        const response = await fetch(`/ShoppingCart/GetQueuePosition?bookId=${bookId}`);
                        const result = await response.json();

                        if (result.position > 0) {
                            isValid = false;
                            const bookTitle = item.querySelector('h5').textContent;
                            errorMessage += `${bookTitle} has reached its borrowing limit.\n`;
                        }
                    } catch (error) {
                        console.error('Error checking queue status:', error);
                        isValid = false;
                    }
                }
            }

            return { isValid, errorMessage };
        };

        document.getElementById('checkout-button').addEventListener('click', async function(e) {
            e.preventDefault();

            // Validate cart before proceeding
            const { isValid, errorMessage } = await validateCartForCheckout();
            if (!isValid) {
                alert('Cannot proceed with checkout:\n' + errorMessage + 
                      'Please remove these items from your cart or switch to purchase.');
                return;
            }

            const cartItems = Array.from(document.querySelectorAll('.cart-item')).map(item => {
                const bookId = item.dataset.bookId;
                const purchaseType = purchaseTypes[bookId] || 'buy';
                const format = selectedFormats[bookId] || 'pdf';
                const price = purchaseType === 'borrow' ? 
                    parseFloat(item.querySelector('.borrow-price .price-badge').textContent.replace('₪', '')) :
                    parseFloat(item.querySelector('.purchase-price').textContent.replace('₪', ''));

                return {
                    id: parseInt(bookId),
                    productName: item.querySelector('h5').textContent,
                    productDescription: item.querySelector('.text-muted')?.textContent || '',
                    amount: Math.round(price * 100),
                    currency: 'ils',
                    format: format,
                    purchaseType: purchaseType,
                    isQueued: document.getElementById(`queue-info-${bookId}`)?.style.display !== 'none'
                };
            });

            const cartData = { items: cartItems };

            try {
                const response = await fetch('/checkout/create-checkout-session', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(cartData)
                });

                const session = await response.json();

                if (session.error) {
                    alert(session.error);
                    return;
                }

                const result = await stripe.redirectToCheckout({ sessionId: session.sessionId });
                if (result.error) {
                    alert(result.error.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred during checkout. Please try again.');
            }
        });

        // Initialize purchase types and check queue status
        document.addEventListener('DOMContentLoaded', async () => {
            document.querySelectorAll('.cart-item').forEach(async item => {
                const bookId = item.dataset.bookId;
                purchaseTypes[bookId] = 'buy';
                selectedFormats[bookId] = 'pdf';

                // Check initial queue status if book is in borrow mode
                const borrowRadio = document.getElementById(`borrow_${bookId}`);
                if (borrowRadio && borrowRadio.checked) {
                    await checkQueueStatus(bookId);
                }
            });
        });
    </script>
}
