@model eBookStore.Models.ViewModels.AdminDashViewModel
@{
    
}


<div class="d-flex">
    <div class="d-flex flex-column flex-shrink-0 p-3 bg-secondary" style="width: 280px; height: 100h;">
        <ul class="adminFunctions nav nav-pills flex-column mb-auto">
            <li class="nav-item">
                <a href="#" class="nav-link active" data-function="GeneralInfoDisplay" aria-current="page">
                    <svg class="bi me-2" width="16" height="16"><use xlink:href="#home"/></svg>
                    General Data
                </a>
            </li>
            <li>
                <a href="#" data-function="galleryManagerDisplay" class="nav-link link-dark">
                    <svg class="bi me-2" width="16" height="16"><use xlink:href="#speedometer2"/></svg>
                    Manage Gallery
                </a>
            </li>
            <li>
                <a href="#" data-function="ManageUsersDisplay" class="nav-link link-dark">
                    <svg class="bi me-2" width="16" height="16"><use xlink:href="#speedometer2"/></svg>
                    Manage Users
                </a>
            </li>
            <li>
                <a href="#" data-function="discount" class="nav-link link-dark">
                    <svg class="bi me-2" width="16" height="16"><use xlink:href="#speedometer2"/></svg>
                    Create Discount
                </a>
            </li>
            <li>
                <a href="#" data-function="MakeAdminDisplay" class="nav-link link-dark">
                    <svg class="bi me-2" width="16" height="16"><use xlink:href="#speedometer2"/></svg>
                    Make admin
                </a>
            </li>

        </ul>
    </div>

    <!-- מקום להצגת הנתונים -->
    <div id="dataDisplay" class="flex-grow-1 p-3">

        <!-- General Info-->
        <div class="GeneralInfoDisplay">

        </div>
        <form method="post" action="@Url.Action("ToggleAdmin", "User")">
            <div class="MakeAdminDisplay" style="display: none; background-color: black; color: #f9f9f9; ">
                <div class="ListOfUsers2 col-4" style="background-color: black; color: white; padding: 10px; border-radius: 5px;">
                    <h3>User List</h3>
                    <ul style="list-style: none; padding: 0;">
                        @if (Model.allUsers != null && Model.allUsers.Any())
                        {
                            @foreach (var user in Model.allUsers)
                            {
                                <li class="nav-item" style="margin-bottom: 10px;">
                                    <button type="submit" name="userId" value="@user.id" class="btn btn-link" style="color: white; text-decoration: none;">
                                        @user.username
                                        <p>@user.type</p>
                            </button>
                                </li>
                            }
                        }
                        
                        else
                        {
                            <li>No users available.</li>
                        }
                    </ul>
                </div>
            </div>
        </form>


        <!-- Manage Gallery -->
        <div class="galleryManagerDisplay container mt-5" style="display:none;">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h1 class="h3">Add Book</h1>
                    <p>Fill all the required fields below to add a new book.</p>
                </div>
                <div class="card-body">
                    <form method="post" id="createBookForm" enctype="multipart/form-data" asp-action="CreateBook" class="needs-validation" novalidate>
                        <fieldset>
                            <legend class="h5 text-secondary">Book Info</legend>
                            <div class="mb-3">
                                <label for="bookViewModel.genreModel.name" class="form-label">Category:</label>
                                <input type="text" name="bookViewModel.genreModel.name" class="form-control" placeholder="Enter category" required />
                                <div class="invalid-feedback">Category is required.</div>
                            </div>
                            <div class="mb-3">
                                <label for="bookViewModel.book.title" class="form-label">Title:</label>
                                <input type="text" name="bookViewModel.book.title" class="form-control" placeholder="Enter title" required />
                                <div class="invalid-feedback">Title is required.</div>
                            </div>
                            <div class="mb-3">
                                <label for="bookViewModel.book.borrowPrice" class="form-label">Borrow Price ($):</label>
                                <input type="text" name="bookViewModel.book.borrowPrice" class="form-control" placeholder="Enter borrow price" required />
                                <div class="invalid-feedback">Borrow Price is required.</div>
                            </div>
                            <div class="mb-3">
                                <label for="bookViewModel.book.buyingPrice" class="form-label">Buy Price ($):</label>
                                <input type="text" name="bookViewModel.book.buyingPrice" class="form-control" placeholder="Enter buy price" required />
                                <div class="invalid-feedback">Buy Price is required.</div>
                            </div>
                            <div class="mb-3">
                                <label for="bookViewModel.book.pubDate" class="form-label">Publish Date:</label>
                                <input type="date" name="bookViewModel.book.pubDate" class="form-control" required />
                                <div class="invalid-feedback">Publish Date is required.</div>
                            </div>
                            <div class="mb-3">
                                <label for="bookViewModel.book.ageLimit" class="form-label">Age Limit:</label>
                                <input type="text" name="bookViewModel.book.ageLimit" class="form-control" placeholder="Enter age limit" required />
                                <div class="invalid-feedback">Age Limit is required.</div>
                            </div>
                            <div class="form-check mb-3">
                                <input type="checkbox" name="bookViewModel.book.canBorrow" class="form-check-input" id="canBorrow" />
                                <label class="form-check-label" for="canBorrow">Borrowable</label>
                            </div>
                        </fieldset>
                        <hr>
                        <fieldset>
                            <legend class="h5 text-secondary">Publisher Info</legend>
                            <div class="mb-3">
                                <label for="bookViewModel.publishers[0].name" class="form-label">Publisher:</label>
                                <input type="text" name="bookViewModel.publishers[0].name" class="form-control" placeholder="Enter publisher name" required />
                                <div class="invalid-feedback">Publisher name is required.</div>
                            </div>
                        </fieldset>
                        <hr>
                        <fieldset>
                            <legend class="h5 text-secondary">Author Info</legend>
                            <div class="mb-3">
                                <label for="bookViewModel.authorModel.name" class="form-label">Author Name:</label>
                                <input type="text" name="bookViewModel.authorModel.name" class="form-control" placeholder="Enter author name" required />
                                <div class="invalid-feedback">Author Name is required.</div>
                            </div>
                        </fieldset>
                        <hr>
                        <fieldset>
                            <legend class="h5 text-secondary">Book Cover</legend>
                            <div class="mb-3">
                                <label for="coverImage" class="form-label">Upload Book Cover (JPG only):</label>
                                <input type="file" id="coverImage" name="coverImage" class="form-control" accept=".jpg,.jpeg" required />
                                <div class="invalid-feedback">Book cover is required.</div>
                            </div>
                        </fieldset>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-success">Upload Book</button>
                        </div>
                    </form>
                </div>
            </div>
       <div class="container mt-5">
            <div class="card shadow-sm">
                <div class="card-header bg-danger text-white">
                    <h4 class="mb-0">Delete Book</h4>
                </div>
                <div class="card-body">
                    <p class="text-muted">Enter the title of the book you wish to delete and confirm the action.</p>
                    <form method="post" id="deleteBookForm" action="@Url.Action("DeleteBook", "User")" class="needs-validation" novalidate>
                        <div class="mb-3">
                            <label for="bookTitle" class="form-label">Book Title:</label>
                            <input type="text" id="bookTitle" name="title" class="form-control" placeholder="Enter book title" required />
                            <div class="invalid-feedback">Please provide a book title.</div>
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-danger">Delete Book</button>
                        </div>
                    </form>
                    <div class="container mt-3">
                    @if (TempData["ErrorMessage1"] != null)
                        {
                            <div class="alert alert-danger" role="alert">
                                @TempData["ErrorMessage1"]
                            </div>
                        }
                        @if (TempData["SuccessMessage1"] != null)
                        {
                            <div class="alert alert-success" role="alert">
                                @TempData["SuccessMessage1"]
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        
    </div>
    

        <!-- Manage users§-->


        <div id="ManageUsersDisplay" class="ManageUsersDisplay row" style="display:none">
            <!-- User List Section -->
            <div class="ListOfUsers col-4" style="background-color: black; color: white; padding: 10px; border-radius: 5px;">
                <h3>User List</h3>
                <ul style="list-style: none; padding: 0;">
                    @if (Model.allUsers != null && Model.allUsers.Any())
                    {
                        @foreach (var user in Model.allUsers)
                        {
                            <li class="nav-item" style="margin-bottom: 10px;">
                                <a href="#" class="nav-link" data-username="@user.username" 
                                data-id="@user.id"
                                data-password="@user.password"
                                data-email="@user.email"
                                data-firstname="@user.firstName" 
                                data-lastname="@user.lastName"
                                data-phone="@user.phoneNumber" 
                                data-type="@user.type" 
                                style="color: white; text-decoration: none;">
                                    @user.username
                                </a>
                            </li>
                        }
                    }
                    else
                    {
                        <li>No users available.</li>
                    }
                </ul>
            </div>

            <!-- User Details Section -->
            <div class="UserDetails col-8" style="background-color: #f9f9f9; padding: 20px; border-radius: 5px;">
                <h3>User Details</h3>
                <div id="UserDetailsContent">
                    <p>Select a user from the list to view their details.</p>
                </div>
            </div>
            <div class="container mt-3">
            @if (TempData["SuccessMessage2"] != null)
            {
                <div class="alert alert-success" role="alert">
                    @TempData["SuccessMessage2"]
                </div>
            }
            @if (TempData["ErrorMessage2"] != null)
            {
                <div class="alert alert-danger" role="alert">
                    @TempData["ErrorMessage2"]
                </div>
            }
        </div>
        </div>
        

    
        <!-- Discount Form -->
        <div class="discount" style="display:none">
            <h1>Create Discount</h1>
            <p class="text-muted">Fill in the details below to create a discount. Discount percentage must be a number between 0 and 1.</p>

            <form method="post" id="discountForm" asp-controller="User" asp-action="ApplyDiscount" class="needs-validation" novalidate>
                <fieldset>
                    <div class="mb-3">
                        <label for="title" class="form-label">Book Name:</label>
                        <input type="text" id="title" name="_title" class="form-control" placeholder="Enter book name" required />
                        <div class="invalid-feedback">Please provide a book name.</div>
                    </div>
                    <div class="mb-3">
                        <label for="discountPercentage" class="form-label">Discount Percentage (0–1):</label>
                        <input type="number" id="discountPercentage" name="discountPercentage" class="form-control" min="0" max="1" step="0.01" placeholder="Enter discount percentage" required />
                        <div class="invalid-feedback">Please enter a valid discount percentage (between 0 and 1).</div>
                    </div>
                    <div class="mb-3">
                        <label for="saleEndDate" class="form-label">Sale End Date:</label>
                        <input type="date" id="saleEndDate" name="saleEndDate" class="form-control" required />
                        <div class="invalid-feedback">Please provide a valid sale end date.</div>
                    </div>
                </fieldset>
                <button type="submit" class="btn btn-primary">Apply Discount</button>
            </form>
             <div class="container mt-3">
                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-danger" role="alert">
                        @TempData["ErrorMessage"]
                    </div>
                }
                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success" role="alert">
                        @TempData["SuccessMessage"]
                    </div>
                }
            </div>
        </div>
       
        

    </div>
</div>

<script>

    let data = @Json.Serialize(Model);
    function editUser_(userId) {
        console.log("User ID:", userId);
        window.location.href = `/User/editUser?userId=${userId}`;
    }
    //this used for discount
    document.addEventListener("DOMContentLoaded", () => {
        const discountForm = document.querySelector("form[action$='ApplyDiscount']");
        const titleInput = document.getElementById("title");

        discountForm.addEventListener("submit", (event) => {
            if (!titleInput.value.trim()) {
                event.preventDefault();
                alert("Please provide a valid book title.");
                titleInput.focus();
            }
            const discountPercentageInput = document.getElementById("discountPercentage");
                const discountPercentage = parseFloat(discountPercentageInput.value);

                // Custom validation for discount percentage
                if (discountPercentage < 0 || discountPercentage > 1 || isNaN(discountPercentage)) {
                    event.preventDefault();
                    event.stopPropagation();
                    discountPercentageInput.focus();
                }
        });
    });

    document.addEventListener("DOMContentLoaded", () => {
        // Add client-side validation for forms
        const forms = document.querySelectorAll(".needs-validation");

        forms.forEach((form) => {
            form.addEventListener("submit", (event) => {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }

                

                form.classList.add("was-validated");
            });
        });

        // Sale End Date Validation
        const saleEndDateInput = document.getElementById("saleEndDate");
        if (saleEndDateInput) {
            saleEndDateInput.addEventListener("input", () => {
                const currentDate = new Date();
                const selectedDate = new Date(saleEndDateInput.value);

                if (selectedDate < currentDate) {
                    alert("Sale End Date must be a future date.");
                    saleEndDateInput.value = ""; // Reset the input
                }
            });
        }
    });


    //this functionType used for Validation ListOfUsers addbook
   document.addEventListener("DOMContentLoaded", () => {
       
        const createBookForm = document.getElementById("createBookForm");
        if (createBookForm) {
            createBookForm.addEventListener("submit", (event) => {
                if (!createBookForm.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                    alert("Please fill all the fields.");
                }else{
                    alert("Book Created.");

                }
                createBookForm.classList.add("was-validated");
            });
        }

        const deleteBookForm = document.querySelector("#deleteBookForm");
        const bookTitleInput = document.querySelector("#bookTitle");
        if (deleteBookForm) {
            deleteBookForm.addEventListener("submit", (event) => {
                if (!bookTitleInput.value.trim()) {
                    event.preventDefault();
                    event.stopPropagation();
                    alert("Please provide a valid book title.");
                    bookTitleInput.focus();
                }
                
            });
        }
    });

   


    document.addEventListener("DOMContentLoaded", () => 
        {
        // Sidebar Navigation
        const sidebarLinks = document.querySelectorAll(".adminFunctions .nav-link");
        const sections = 
        {
            GeneralInfoDisplay: document.querySelector(".GeneralInfoDisplay"),
            galleryManagerDisplay: document.querySelector(".galleryManagerDisplay"),
            ManageUsersDisplay: document.querySelector("#ManageUsersDisplay"),
            discount: document.querySelector(".discount"),
            MakeAdminDisplay: document.querySelector(".MakeAdminDisplay")
        };
        const userLinks2 = document.querySelectorAll(".ListOfUsers2 a");

        userLinks2.forEach(link => {
            link.addEventListener("click", (event) => {
                event.preventDefault();

                const username = link.getAttribute("data-username");
                const type = link.getAttribute("data-type");

                
                const isConfirmed = confirm(`Are you sure you want to make the user "${username}" an admin?`);
                if (isConfirmed) {
                    const user = data.allUsers.find(u => u.username === username);
                    if (user) {
                        alert(`User: ${user.username} is now an admin.`);
                    }
                } else {
                    alert(`Action canceled. ${username} remains unchanged.`);
                }
            });
        });

        sidebarLinks.forEach(link => {
            link.addEventListener("click", (event) => {
                event.preventDefault();

                // Hide all sections
                Object.values(sections).forEach(section => {
                    if (section) section.style.display = "none";
                });

                // Show the selected section
                const functionType = link.getAttribute("data-function");
                const targetSection = sections[functionType];
                if (targetSection) {
                    targetSection.style.display = "block";
                }

                // Update active link
                sidebarLinks.forEach(l => l.classList.remove("active"));
                link.classList.add("active");
            });
        });

        // Sale End Date Validation
        const saleEndDateInput = document.getElementById("saleEndDate");
        if (saleEndDateInput) {
            saleEndDateInput.addEventListener("input", () => {
                const currentDate = new Date();
                const maxDate = new Date();
                maxDate.setDate(currentDate.getDate() + 7);

                const selectedDate = new Date(saleEndDateInput.value);

                if (selectedDate > maxDate) {
                    alert("Sale End Date cannot be more than 7 days from today.");
                    saleEndDateInput.value = ""; // Reset the input
                }
            });
        }

        // File Upload Validation
        const uploadButton = document.querySelector(".upload-butt");
        const coverInput = document.getElementById("coverImage");

        if (coverInput && uploadButton) {
            coverInput.addEventListener("change", (event) => {
                const file = event.target.files[0];
                if (file) {
                    const allowedExtensions = ['.jpg', '.jpeg'];
                    const fileExtension = file.name.split('.').pop().toLowerCase();

                    if (!allowedExtensions.includes(`.${fileExtension}`)) {
                        alert("Invalid file type! Please upload a JPG image.");
                        coverInput.value = ""; // Reset the input
                    } else {
                        alert(`File "${file.name}" is ready to upload.`);
                    }
                }
            });

            uploadButton.addEventListener("click", (event) => {
                const file = coverInput.files[0];
                if (!file) {
                    alert("Please select a file before uploading.");
                    event.preventDefault(); // Prevent form submission
                } else {
                    alert(`Uploading "${file.name}"...`);
                }
            });
        }

        // User Details Management
        const userLinks = document.querySelectorAll(".nav-link[data-username]");
        const userDetailsContent = document.getElementById("UserDetailsContent");

        userLinks.forEach(link => {
            link.addEventListener("click", (event) => {
                event.preventDefault();


                const userLinks = document.querySelectorAll(".nav-link[data-username]");
                const userDetailsContent = document.getElementById("UserDetailsContent");

                userLinks.forEach(link => {
                    link.addEventListener("click", (event) => {
                        event.preventDefault();

                        // Get user details from data attributes

                        const id = link.getAttribute("data-id");
                        const password = link.getAttribute("data-password");
                        const username = link.getAttribute("data-username");
                        const email = link.getAttribute("data-email");
                        const firstName = link.getAttribute("data-firstname");
                        const lastName = link.getAttribute("data-lastname");
                        const phone = link.getAttribute("data-phone");
                        const type = link.getAttribute("data-type");
                        
                        // Update the UserDetailsContent section
                        userDetailsContent.innerHTML = `
                            <div>
                                <h4>Details for: ${username}</h4>
                                <p><strong>Password:</strong>${password}</p>
                                <p><strong>Email:</strong> ${email}</p>
                                <p><strong>First Name:</strong> ${firstName}</p>
                                <p><strong>Last Name:</strong> ${lastName}</p>
                                <p><strong>Phone:</strong> ${phone}</p>
                                <p><strong>Type:</strong> ${type}</p>
                            </div>
                            <a href="/User/editUser?userId=${id}" class="btn btn-primary">Edit User</a>`;
                    });
                });
            });
        });
    });

</script>