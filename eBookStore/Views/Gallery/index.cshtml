@model eBookStore.Models.ViewModels.GalleryPageViewModel
@{
    ViewData["Title"] = "Gallery";
    var currentUserId = Context.Session.GetInt32("userId") ?? 0;

}

<div class="Gallery-container d-flex">


    <div class="d-flex flex-column flex-shrink-0 p-3 bg-secondary" style="width: 280px;">
        <h4 class="text-center">Categorys</h4>

        <hr>
            <ul class="categorysList nav nav-pills flex-column mb-auto">

                <li class="nav-item">
                    <a href="#" class="nav-link active" data-genre="all" aria-current="page">
                        <svg class="bi me-2"  width="16" height="16"><use xlink:href="#home"/></svg>
                        All-Caregorys
                    </a>
                </li>

                @foreach(var cate in Model.listOfCategorys)
                {
                    <li>
                        <a href="#" data-genre="@cate.Replace(" ","-")" class="nav-link link-dark">
                            <svg class="bi me-2"  width="16" height="16"><use xlink:href="#speedometer2"/></svg>
                            @cate
                        </a>
                    </li>
                }

            </ul>
        <hr>


    </div>


    <div class="flex-column w-100 ms-4 ">

        <div class="row">
            <hr>
            <div class="col">
                <h2>Welcome to the book gallery:</h2>
            </div>
            

            <div class="col d-flex justify-content-end" >


                <div class="dropdown show mt-2" >
                    <a class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" id="dropdownMenuLink" aria-haspopup="true" aria-expanded="false">
                        Order-By
                    </a>

                    <input type="checkbox" id="filterOnSale">
                        On-Sale
                    </input>

                    <div class="dropdown-menu" aria-labelledby="dropdownMenuLink" style="background-color: rgb(79, 79, 79);">
                        <a id="orderByButt" class="dropdown-item" href="#">Price Increase</a>
                        <a id="orderByButt" class="dropdown-item" href="#">Price Decrease</a>
                        <a id="orderByButt" class="dropdown-item" href="#">Most Popular</a>
                        <a id="orderByButt" class="dropdown-item" href="#">Genre</a>
                        <a id="orderByButt" class="dropdown-item" href="#">Year of Publishing</a>
                    </div>
                </div> 
                
            </div>
                      

        <hr class="mt-2">

        </div>
        

        <!--Books Gallery-->
        <div class="Books-Container row ms-4" style="row-gap: 20px; column-gap: 20px;">

            @foreach(var book in Model.allBooks)
            {
                <div class="card book-item h-100" 
                data-genre="@book?.genreModel?.name.Replace(" ", "-")" 
                style="width: 18rem; padding-left: 0px; padding-right: 0px;"
                data-price="@book.book.buyingPrice"
                data-year="@book.book.pubDate.Year"
                data-onSale="@book.book.onSale">
                    
                    
                    <div class="imageWrapp">
                        <a href="@Url.Action("Index", "Book")/@book?.book?.id">
                            <img src="\images\bookCovers\@book.coverModel.imgName" class="card-img-top" alt="@book.coverModel.imgName">
                        </a>
                    </div>
                    
                    <div class="card-body d-grid">
                        <h5 class="card-title">@book.book.title</h5>
                        @if(book.book.onSale)
                        {
                            <p class="card-text">
                                    <a><strong>Author:</strong> @book.authorModel.name </a><br>
                                    <a><strong>Published by:</strong> @string.Join(", ", book.publishers.Select(p => p.name))</a><br>
                                    <a><strong>Genre:</strong> @book.genreModel.name</a><br>
                                    <a><strong>Age limit:</strong> @book.book.ageLimit</a><br>
                                    <a><strong>Publish date:</strong> @book.book.pubDate.ToString("yyyy-MM-dd")</a><br>
                                    <a><strong>Rating:</strong> @book.book.starRate</a><br>
                                    @if(book.book.canBorrow)
                                    {<a><strong>Borrow Price:</strong> @book.book.borrowPrice$</a><br>}
                                    <a class="text-muted text-decoration-line-through"><strong>Original Price:</strong> @book.book.buyingPrice$</a><br>
                                    <a><strong>Sale Price:</strong> @(book.book.buyingPrice * book.bookDiscountModel.discountPrecentage)$</a>

                            </p>
                        }
                        else
                        {
                            <p class="card-text">
                                <a><strong>Author:</strong> @book.authorModel.name </a><br> 
                                <a><strong>Published by:</strong> @string.Join(", ", book.publishers.Select(p => p.name))</a><br>
                                <a><strong>Genre:</strong> @book.genreModel.name</a><br>
                                <a><strong>Age limit:</strong> @book.book.ageLimit</a><br>
                                <a><strong>Publish date:</strong> @book.book.pubDate.ToString("yyyy-MM-dd")</a><br>
                                <a><strong>Rating:</strong> @book.book.starRate</a><br>
                                @if(book.book.canBorrow) 
                                {<a><strong>Borrow Price:</strong> @book.book.borrowPrice$</a><br>}
                                <a><strong>Buy Price:</strong> @book.book.buyingPrice$</a><br>
                            </p>

                        </p>

                        @if(book.book.canBorrow)
                        {
                            <div class="price-container card-footer" style="background-color:white">
                                <div class="row">

                                    <div class="col" style="background-color: rgb(255, 255, 255);" id="Buy-Button">
                                        <a href="#" class="Buy-button text-black">Buy-Now</a>
                                    </div>
                                    
                                    <div class="dropdown col">
                                        <a href="#" class="dropdown-toggle text-black" data-bs-toggle="dropdown" aria-expanded="false">Add to Cart</a>
                                        
                                        <li class="dropdown-menu col" style="background-color: rgb(79, 79, 79);" id="Add-to-cart-Button">
                                            <div class="addToCart-menu-content">
                                                <a class="dropdown-item" asp-controller="ShoppingCart" asp-action="AddToShoppingCart">Buy</a>
                                                <a class="dropdown-item" asp-controller="ShoppingCart" asp-action="AddToShoppingCart">Borrow</a>
                                            </div>
                                        </li>
                                    </div>

                                <div class="col" style=" background-color: rgb(255, 255, 255);" id="Buy-Button">
                                    <a href="#" class="Buy-button text-black">Buy-Now</a>
                                </div>

                                <div class="dropdown col">
                                    <a href="#" class="dropdown-toggle text-black" data-bs-toggle="dropdown" aria-expanded="false">Add to Cart</a>
                                    <li class="dropdown-menu col" style="z-index: 9999; background-color: rgb(79, 79, 79);" id="Add-to-cart-Button">
                                        <div class="addToCart-menu-content">
                                            <a class="dropdown-item" data-action="buy" style="color: aliceblue;" data-book-id="@book.book.id">Buy</a>
                                            @if(book.book.canBorrow)
                                            {
                                                <a class="dropdown-item" data-action="borrow" style="color: aliceblue;" data-book-id="@book.book.id">Borrow</a>
                                            }
                                        </div>
                                    </li>
                                </div>
                            </div>
                        }   
                        else
                        {
                            <div class="price-container card-footer" style="background-color:white">
                                <div class="row" style="column-gap: 5px;">
                                    <div class="col" style="background-color: rgb(255, 255, 255);" id="Buy-Button">
                                        <a href="#" class="Buy-button text-black">Buy-Now</a>
                                    </div>

                                    <div class="dropdown col">
                                        <a href="#" class="dropdown-toggle text-black" data-bs-toggle="dropdown" aria-expanded="false">Add to Cart</a>
                                        
                                        <li class="dropdown-menu col" style="background-color: rgb(79, 79, 79);" id="Add-to-cart-Button">
                                            <div class="addToCart-menu-content">
                                                <a class="dropdown-item" asp-controller="ShoppingCart" asp-action="AddToShoppingCart">Buy</a>
                                            </div>
                                        </li>
                                    </div>

                                    

                                </div>
                            </div>

                        }
                    </div>
                </div> 
            }
        </div>
    </div>
</div>



@section Scripts {

<script>

    const BookCards = document.querySelector('.Book-Cards');
    const bookCategorysContainer = document.querySelector('.categorysList');
    var galleryModel = @Json.Serialize(Model);

    var categoryList = galleryModel.listOfCategorys;
    console.log(categoryList);




    document.addEventListener('DOMContentLoaded', () => {
        const categoryLinks = document.querySelectorAll('.categorysList .nav-link');
        const books = document.querySelectorAll('.book-item');

        categoryLinks.forEach(link => 
        {


            link.addEventListener('click', (e) => 
            {
                e.preventDefault();
                const genre = e.target.closest('a').getAttribute('data-genre');

                // Highlight active link
                categoryLinks.forEach(l => l.classList.remove('active'));
                e.target.closest('a').classList.add('active');

                // Filter books
                books.forEach(book => 
                {
                    if (genre === 'all' || book.getAttribute('data-genre') === genre) {
                        book.style.display = 'block';
                    } else {
                        book.style.display = 'none';
                    }
                });
            });
        });

        const onSaleCheckBox = document.querySelector('#filterOnSale');

        onSaleCheckBox.addEventListener('change', (e) => {
            books.forEach(book => {
                // Get the sale status from the book's data-onSale attribute
                const bookOnSale = book.getAttribute('data-onSale') === 'True';

                if (onSaleCheckBox.checked) {
                    // Show only books on sale
                    if (bookOnSale) {
                        book.style.display = 'block';
                    } else {
                        book.style.display = 'none';
                    }
                } else {
                    // Show all books when the checkbox is unchecked
                    book.style.display = 'block';
                }
            });
        });
    });

    document.addEventListener('DOMContentLoaded', () => {
        const booksContainer = document.querySelector('.Books-Container');
        const books = Array.from(document.querySelectorAll('.book-item'));
        const sortOptions = document.querySelectorAll('#orderByButt');

        sortOptions.forEach(option => {
            option.addEventListener('click', event => {
                event.preventDefault();

                const sortBy = event.target.textContent.trim();
                let sortedBooks;

                switch (sortBy) {
                    case 'Price Increase':
                        sortedBooks = books.sort((a, b) => 
                            parseFloat(a.getAttribute('data-price')) - parseFloat(b.getAttribute('data-price'))
                        );
                        break;
                    case 'Price Decrease':
                        sortedBooks = books.sort((a, b) => 
                            parseFloat(b.getAttribute('data-price')) - parseFloat(a.getAttribute('data-price'))
                        );
                        break;
                    case 'Year of Publishing':
                        sortedBooks = books.sort((a, b) => 
                            parseInt(b.getAttribute('data-year')) - parseInt(a.getAttribute('data-year'))
                        );
                        break;
                    default:
                        sortedBooks = books; // Default order
                }

                // Clear the container and re-append sorted books
                booksContainer.innerHTML = '';
                sortedBooks.forEach(book => booksContainer.appendChild(book));
            });
        });
    document.querySelectorAll('.dropdown-item[data-action]').forEach(item => {
            item.addEventListener('click', async (e) => {
                e.preventDefault();

                const action = e.target.dataset.action; 
                const bookId = e.target.dataset.bookId;

                try {
                    const response = await fetch('/ShoppingCart/AddToShoppingCart', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            bookId: parseInt(bookId),
                            format: "pdf",
                            isBorrowed: action === 'borrow'
                        })
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if (result.success) {
                            alert(`Book added to cart successfully!`);
                        } else {
                            alert(result.message || 'Failed to add to cart');
                        }
                    } else if (response.status === 401) {
                        window.location.href = '/Auth/Login';
                    } else {
                        alert('Failed to add item to cart');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error adding item to cart');
                }
            });
        });
    });

</script>

}
